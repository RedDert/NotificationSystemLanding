/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TeamsImport } from './routes/teams'
import { Route as ProfileImport } from './routes/profile'
import { Route as NewImport } from './routes/new'
import { Route as HomeImport } from './routes/home'
import { Route as AboutImport } from './routes/about'

// Create/Update Routes

const TeamsRoute = TeamsImport.update({
  id: '/teams',
  path: '/teams',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const NewRoute = NewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => rootRoute,
} as any)

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/new': {
      id: '/new'
      path: '/new'
      fullPath: '/new'
      preLoaderRoute: typeof NewImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/teams': {
      id: '/teams'
      path: '/teams'
      fullPath: '/teams'
      preLoaderRoute: typeof TeamsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/about': typeof AboutRoute
  '/home': typeof HomeRoute
  '/new': typeof NewRoute
  '/profile': typeof ProfileRoute
  '/teams': typeof TeamsRoute
}

export interface FileRoutesByTo {
  '/about': typeof AboutRoute
  '/home': typeof HomeRoute
  '/new': typeof NewRoute
  '/profile': typeof ProfileRoute
  '/teams': typeof TeamsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/about': typeof AboutRoute
  '/home': typeof HomeRoute
  '/new': typeof NewRoute
  '/profile': typeof ProfileRoute
  '/teams': typeof TeamsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/about' | '/home' | '/new' | '/profile' | '/teams'
  fileRoutesByTo: FileRoutesByTo
  to: '/about' | '/home' | '/new' | '/profile' | '/teams'
  id: '__root__' | '/about' | '/home' | '/new' | '/profile' | '/teams'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AboutRoute: typeof AboutRoute
  HomeRoute: typeof HomeRoute
  NewRoute: typeof NewRoute
  ProfileRoute: typeof ProfileRoute
  TeamsRoute: typeof TeamsRoute
}

const rootRouteChildren: RootRouteChildren = {
  AboutRoute: AboutRoute,
  HomeRoute: HomeRoute,
  NewRoute: NewRoute,
  ProfileRoute: ProfileRoute,
  TeamsRoute: TeamsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/about",
        "/home",
        "/new",
        "/profile",
        "/teams"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/new": {
      "filePath": "new.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/teams": {
      "filePath": "teams.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
